#!/bin/bash

# shellcheck disable=2015

# Inspired from: https://github.com/amancevice/spin

# Dependencies: timeout tail tput
# Optional:     inotifywait # better performance

set -ueo pipefail
shopt -s inherit_errexit
shopt -s checkwinsize; (:;:)

APP=${0##*/}
VER=0.1

CHAR_ERROR='✘' # Unicode 'Heavy Ballot X': echo -e '\u2718'
# CHAR_SUCCESS='✔' # Unicode 'Heavy check mark': echo -e '\u2714' # Check mark is cut off in PuTTY
CHAR_SUCCESS='✓' # Unicode 'check mark': echo -e '\u2713'
# CHAR_SUCCESS='[ OK ]' # Unicode 'check mark': echo -e '\u2713'
SPINNER=(⠏ ⠛ ⠹ ⠼ ⠶ ⠧) # More spinner: https://github.com/jorexdeveloper/terminal-animations/tree/main/animations
SPINNER_SPEED=0.25
SPINNER_SPEED_MS=250

BUFFER=6
KILL_SIGNAL="SIGKILL"
NO_COLOR=0
OUTPUT_FILE=$(mktemp -p /tmp "$APP.XXX")
SHOW_OUTPUT_ON_ERROR=1
SHOW_OUTPUT_ON_SUCCESS=0

_usage() {
	cat <<-USAGE
		$APP $VER

		Usage:
		  $APP [OPTIONS] -- [COMMAND]

		Options:
		  -e, --hide-error  Hide command output on error.
		  -f, --foreground  Keep last output on exit.
		  -l, --lines       Define how many lines to show. 0 = use complete screen.
		  -n, --no-color    Disable colors.
		  -t, --title       Show title instead of command.
		  -h, --help        Show this help.

	USAGE
	if ! hash inotifywait &>/dev/null; then
		echo "'inotifywait' is not available. For better performance, install the 'inotify-tools' package."
		echo
	fi
	exit 0
 }

_parseArguments() {
	while (( $# )); do
		case "$1" in
			-e|--hide-error)  SHOW_OUTPUT_ON_ERROR=0;    shift ;;
			-f|--foreground)  SHOW_OUTPUT_ON_SUCCESS=1;  shift ;;
			-h|--help)                                  _usage ;;
			-l|--lines)       shift;         BUFFER=$1;  shift ;;
			-n|--no-color)                  NO_COLOR=1;  shift ;;
			-t|--title)       shift;          TITLE=$1;  shift ;;
			--)               shift;                     break ;;

			-*) echo -e "Error: Unknown option '$1'\n"; exit 1 ;;
			*) break ;;
		esac
	done

	if ! [[ $BUFFER =~ ^[0-9]+$ ]]; then
		echo "Error: Invalid value for lines."
		echo
		exit 1
	fi
	BUFFER_MAX=$BUFFER

	[ $# -ne 1 ] &&	_usage

	TITLE=${TITLE:-$1}
	CMD=$1
}

_adjustBufferToScreenSize() {
	# No terminal?
	if [ -z ${LINES:-} ]; then
		return 0
	fi

	local SCREEN=$((LINES - 2))
	if (( BUFFER_MAX == 0 )); then
		# Set BUFFER to screen size
		BUFFER=$SCREEN
		return 0
	fi

	if (( BUFFER > SCREEN )); then
		# Decrease BUFFER to screen size
		BUFFER=$SCREEN
	elif (( BUFFER < SCREEN )); then
		if (( BUFFER_MAX < SCREEN )); then
			# Set BUFFER to configured max size; default 5
			BUFFER=$BUFFER_MAX
		else
			# Increase BUFFER to screen size
			BUFFER=$SCREEN
		fi
	fi
	return 0
}
trap _adjustBufferToScreenSize SIGWINCH

_color() {
	# GREY=$'\e[1;30m'
	RED=$'\e[1;31m'
	GREEN=$'\e[1;32m'
	YELLOW=$'\e[1;33m'
	BLUE=$'\e[1;34m'
	RESET=$'\e[0m'

	OUTPUT_COLOR=$BLUE
	SPINNER_COLOR=$YELLOW

	# Colorize chars
	CHAR_SUCCESS="${GREEN}${CHAR_SUCCESS}${RESET}"
	CHAR_ERROR="${RED}${CHAR_ERROR}${RESET}"
}
_noColor() {
	# GREY=
	RED=
	GREEN=
	YELLOW=
	BLUE=
	RESET=

	OUTPUT_COLOR=
	SPINNER_COLOR=
}

_prepareTerminal() {
	# Disable word-wrapping
	[ -n "${TMUX:-}" ] && printf "\e[?7l" || tput rmam

	# Hide cursor
	tput civis
}

# Print $1 on each buffer line, from bottom to top
# The cursor is finally placed at the beginning
_printToEachBufferLine() {
	local MODIFIER=$'\e[A'     # Move cursor up
	local i
	if [ -n "${1:-}" ]; then
		MODIFIER+=$1
	fi
	for ((i=1; i <= BUFFER_COUNT; i++)); do
		printf -- '%s' "$MODIFIER" # Buffer line
	done
	printf -- '%s' "$MODIFIER" # Status line
}

_clearOutput() {
	_printToEachBufferLine $'\e[K' # delete line
}

_moveCursorToBottom() {
	local i
	printf -- '%s' $'\e[B' # Status line
	for ((i=1; i <= ${BUFFER_COUNT:-0}; i++)); do
		printf -- '%s' $'\e[B'
	done
}

_printStatusLine() {
	printf -- '%s'   $'\e[K' # Delete line
	printf -- '%s\n' "$1 $TITLE (${SECONDS}s)"
}

SPIN_POS=0
SPIN_TIME=${EPOCHREALTIME/.} # milliseconds
SPINNER_SPEED_MS=$(( SPINNER_SPEED_MS * 1000 ))
_printStatusLineWithSpinner() {
	local SPIN_CHAR=${SPINNER[SPIN_POS]}
	_printStatusLine "${SPINNER_COLOR}${SPIN_CHAR}${RESET}"
	if (( SPIN_POS < ${#SPINNER[@]} - 1 )); then
		local SPIN_TIME_DIFF
		SPIN_TIME_DIFF=$(( ${EPOCHREALTIME/.} - SPIN_TIME ))
		if (( SPIN_TIME_DIFF > SPINNER_SPEED_MS )); then
			((++SPIN_POS))
			SPIN_TIME=${EPOCHREALTIME/.}
		fi
	else
		SPIN_POS=0
	fi
}

_outputFileBuffer() {
	BUFFER_COUNT=0
	local LINE
	while read -r LINE || [ -n "$LINE" ]; do
		printf -- '%s' $'\e[K' # empty line
		printf -- "$OUTPUT_COLOR%s$RESET\n" "$LINE"
		((++BUFFER_COUNT))
	done < <(tail -n "$BUFFER" "$OUTPUT_FILE")
}

# shellcheck disable=2317
# https://github.com/koalaman/shellcheck/issues/2660
_cleanUp() {
	# Enable word-wrapping
	[ -n "${TMUX:-}" ] && printf "\e[?7h" || tput smam

	# Show cursor
	tput cnorm

	# Remove temporary file
	rm -f "$OUTPUT_FILE"

	# Reset color
	echo -n "${RESET:-}"

	# CTRL-C: Move cursor to bottom to prevent overlapping with output
	_moveCursorToBottom

	# Kill all child proccesses
	{ sleep 1; kill -"$KILL_SIGNAL" -$$ 2>/dev/null; } & # Wait some time to avoid "Killed" message from parent (this) script
}
trap _cleanUp                   EXIT
trap "kill %1; echo; exit 1"  SIGINT # CTRL-C

_main() {
	_parseArguments "$@"
	_adjustBufferToScreenSize
	_prepareTerminal
	(( NO_COLOR == 0 )) && _color || _noColor

	bash -c -- "$CMD" &> "$OUTPUT_FILE" &
	local PID=$!

	if hash inotifywait &>/dev/null; then
		INOTIFYWAIT=(inotifywait -qq -e MODIFY "$OUTPUT_FILE")
	else
		INOTIFYWAIT=(sleep 0.05)
		echo "Info: Install 'inotifywait' for better performance"
		echo
	fi >&2

	while kill -0 $PID &>/dev/null; do
		_printStatusLineWithSpinner
		_outputFileBuffer
		timeout $SPINNER_SPEED "${INOTIFYWAIT[@]}" || true
		_printToEachBufferLine
	done

	if wait %1; then
		# Success
		_moveCursorToBottom
		_clearOutput

		_printStatusLine "$CHAR_SUCCESS"

		if (( SHOW_OUTPUT_ON_SUCCESS == 1)); then
			_outputFileBuffer
		else
			# _moveCursorToBottom is called in _cleanUp
			BUFFER_COUNT=0
			printf -- '%s' $'\e[A' # Move cursor up
		fi

		exit 0
	else
		# Error
		EXIT_CODE=$?

		_moveCursorToBottom
		_clearOutput

		_printStatusLine "$CHAR_ERROR"

		if (( SHOW_OUTPUT_ON_ERROR == 1)); then
			echo "$RED"
			cat "$OUTPUT_FILE"
			echo "$RESET"
		fi

		# _moveCursorToBottom is called in _cleanUp
		BUFFER_COUNT=0
		printf -- '%s' $'\e[A' # Move cursor up

		exit "$EXIT_CODE"
	fi
}

_main "$@"
